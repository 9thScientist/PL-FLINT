%{
#include <string.h>
#include <glib.h>
#include "./sds/sds.h"

sds func; // Dynamic String for function header
GHashTable* varstype; // Hashtable that matches variable -> type
GQueue* lines; //Lines in the template
sds line, att; //Dynamic Strings for current line
%}
%option noyywrap
%x CODE TEMPLATE FLINT
%%
<*>\/\/FLINT { BEGIN CODE; }
<*>.+={{ { BEGIN TEMPLATE; begin_function(yytext);  }
<TEMPLATE>}} { end_function(); BEGIN CODE; }

<FLINT>[^ ]+ { variable(yytext, "char*"); }
<FLINT>%\] { BEGIN TEMPLATE; }

<TEMPLATE>\[% {  BEGIN FLINT; } //]
<TEMPLATE>. { line = sdscat(line, yytext); }
<TEMPLATE>\n { line = sdscat(line, "\n"); end_line();}

<CODE>.|\n { ECHO; }

%%
void variable(char* name, char* type) {
    g_hash_table_insert(varstype, g_strdup(name), g_strdup(type));
    line = sdscat(line, "%s");
    att = sdscatprintf(att, ", %s", name);
}

void begin_function(char* name) {
    sds aux = sdsnew(name);
    sdstrim(name, "={{");

    sdsfree(func);
    func = sdsempty();
    func = sdscatprintf(func, "char* %s(", aux);

    sdsfree(line);
    sdsfree(att);
    line = sdsempty();
    att  = sdsempty();

    sdsfree(aux);
}

// Adds a parameter to the function header
void add_param_function(gpointer name, gpointer type, gpointer user_data) {
    func = sdscatprintf(func, " %s %s,", type, name);
}

// Prints a transformed template line
void print_line(gpointer line, gpointer user_data) {
    printf("\t%s\n", line);
}

void end_function() {
    //Removes the last ',' appended by the add_param_function
    if (g_hash_table_size(varstype) > 0) sdsrange(func, 1, -2);

    func = sdscat(func, ") {\n\tsds str = sdsempty();\n");
    printf("%s", func);

    g_queue_foreach(lines, print_line, NULL);

    printf("}\n");
}

void end_line() {
    sds aux = sdsempty();

    aux = sdscatprintf(aux, "\"%s\"%s", line, att);
    aux = sdscatprintf(sdsempty(), "\tstr = sdscat(str, %s);", aux);

    g_queue_push_head(lines, aux);

    sdsfree(line);
    sdsfree(att);

    line = sdsempty();
    att  = sdsempty();
}

int main (int argc, char* argv[]) {
    varstype = g_hash_table_new(NULL, g_str_equal);

    if(argc == 2)
        yyin = fopen(argv[1], "r");
    yylex();

    return 0;
}
