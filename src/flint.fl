%{
#include <string.h>
#include <glib.h>
#include "sds/sds.h"

sds func; // Dynamic String for function header
GHashTable* varstype; // Hashtable that matches variable -> type
GQueue* lines; //Lines in the template
sds line, att; //Dynamic Strings for current line

void variable(char* name, char* type);
void begin_function(char* name);
void add_param_function(gpointer name, gpointer type, gpointer user_data);
void print_line(gpointer line, gpointer user_data);
void end_function();
void end_line();
%}
%option noyywrap
%x CODE TEMPLATE
%%
  int include_glib = 1;
<*>\/\/FLINT { BEGIN CODE; }
<*>#include\ <glib.h> { include_glib = 0; }

<TEMPLATE>\[%\ [^ ]+\ %\] { variable(yytext, "char*"); }
<TEMPLATE>\}\} { end_line(); end_function(); BEGIN CODE; }
<TEMPLATE>\n { line = sdscat(line, "\\n"); end_line();}
<TEMPLATE>. { line = sdscat(line, yytext); }

<CODE>.+=\{\{ { if (include_glib) printf("#include <glib.h>\n");
                BEGIN TEMPLATE;
                begin_function(yytext); }
<CODE>.|\n { ECHO; }

%%

void variable(char* name, char* type) {
    sds aux = sdsnew(name);
    sdstrim(aux, "[% ]");

    g_hash_table_insert(varstype, g_strdup(aux), g_strdup(type));
    line = sdscat(line, "%s");
    att = sdscatprintf(att, ", %s", aux);

    sdsfree(aux);
}

void begin_function(char* name) {
    sds aux = sdsnew(name);
    sdstrim(aux, "={");

    sdsfree(func);
    func = sdsempty();
    func = sdscatprintf(func, "char* %s(", aux);

    line = sdsempty();
    att  = sdsempty();

    sdsfree(aux);
}

// Adds a parameter to the function header
void add_param_function(gpointer name, gpointer type, gpointer user_data) {
    func = sdscatprintf(func, " %s %s,", type, name);
}

// Prints a transformed template line
void print_line(gpointer line, gpointer user_data) {
    printf("\t%s\n", line);
}

void end_function() {
    g_hash_table_foreach(varstype, add_param_function, NULL);

    //Removes the last ',' appended by the add_param_function
    sdstrim(func, " ,");

    func = sdscat(func, ") {\n\tGString *str = g_string_new(NULL);\n\n");
    printf("%s", func);

    g_queue_foreach(lines, print_line, NULL);

    printf("\n\treturn g_string_free(str, FALSE);\n}\n");
}

void end_line() {
    sds aux = sdsempty();

    aux = sdscatprintf(aux, "\"%s\"%s", line, att);
    aux = sdscatprintf(sdsempty(), "g_string_append_printf(str, %s);", aux);

    g_queue_push_tail(lines, g_strdup(aux));

    sdsfree(aux);
    sdsfree(line);
    sdsfree(att);

    line = sdsempty();
    att  = sdsempty();
}

int main (int argc, char* argv[]) {
    varstype = g_hash_table_new(NULL, g_str_equal);
    lines = g_queue_new();

    if(argc == 2)
        yyin = fopen(argv[1], "r");
    yylex();

    return 0;
}
